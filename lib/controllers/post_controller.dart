import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:get_storage/get_storage.dart';
import 'package:http/http.dart' as http;
import 'package:theblue_crown/data/repository/like_repo.dart';
import 'package:theblue_crown/data/repository/post_repo.dart';
import 'package:theblue_crown/data/repository/replies_repo.dart';
import 'package:theblue_crown/models/place_post_model.dart';

import '../constance.dart';
import '../data/repository/order_repo.dart';
import '../models/comment_model.dart';
import '../models/order_model.dart';
import '../models/post_model.dart';
import '../models/replies_model.dart';
import '../utils/app_constants.dart';

class PostController extends GetxController implements GetxService{

  PostRepo postRepo;
  OrderRepo orderRepo;
  LikeRepo likeRepo;
  RepliesRepo repliesRepo;
  int productId;

  PostController({
    required this.postRepo,
    required this.orderRepo,
    required this.likeRepo,
    required this.repliesRepo,
    required this.productId
  });

  late List<PostModel> _currentPostList;
  List<PostModel> get currentPostList => _currentPostList;

  late List<RepliesModel> _currentRepliesList;
  List<RepliesModel> get currentRepliesList => _currentRepliesList;

  bool _isLoadingg = false;
  bool get isLoadingg => _isLoadingg;

  PostModel? _createdTime;
  PostModel? get createdTime => _createdTime;

  String _foodNote = " ";
  String get foodNote => _foodNote;

  Rx<List<PostModel>> posts = Rx<List<PostModel>>([]);
  Rx<List<CommentModel>> comments = Rx<List<CommentModel>>([]);
  final isLoading = false.obs;
  final box = GetStorage();

  @override
  void onInit() {
    getAllPosts(productId);
    super.onInit();
  }

  // New One
  Future<void> getAllPosts(int productId) async {
    _isLoadingg = true;
    Response response = await postRepo.getPostList(productId);
    print("The response before if statement in getAllPosts is  :::::::::::::::: " + response.toString());
    if(response.statusCode == 200){
      _currentPostList = [];

      print("The response.body in getAllPosts :::::::::::::::: " + response.body.toString());
      _currentPostList.addAll(Autogenerated.fromJson(response.body).feeds);
      // response.body.forEach((post){
      //   print("The length of current Posts 1 :::::::::::::::: " + _currentPostList.length.toString());
      //   Feeds postModel = Feeds.fromJson(post);
      //   _currentPostList.add(postModel);
      //   print("The length of current Posts 2 :::::::::::::::: " + _currentPostList.length.toString());
      // }
      // );
      print("The length of current Posts 3 :::::::::::::::: " + _currentPostList.length.toString());
    }else{
      _currentPostList = [];
      print("The length of current Posts 4 :::::::::::::::: " + _currentPostList.length.toString());
    }
    _isLoadingg = false;
    // print("The length of current Posts 5 :::::::::::::::: " + _currentPostList.length.toString());
    update();
  }

  Future<int> getAllPosts2(int productId) async {
    _isLoadingg = true;
    Response response = await postRepo.getPostList(productId);
    if(response.statusCode == 200){
      _currentPostList = [];
      _currentPostList.addAll(Autogenerated.fromJson(response.body).feeds);
    }else{
      _currentPostList = [];
    }
    int length = _currentPostList.length;
    _isLoadingg = false;
    update();
    return length;
  }

  // Old One
  // Future getAllPosts() async {
  //   try {
  //     posts.value.clear();
  //     isLoading.value = true;
  //     var response = await http.get(Uri.parse('${url}feeds'), headers: {
  //       'Accept': 'application/json',
  //       'Authorization': 'Bearer ${box.read('token')}',
  //     });
  //     if (response.statusCode == 200) {
  //       isLoading.value = false;
  //       final content = json.decode(response.body)['feeds'];
  //       for (var item in content) {
  //         posts.value.add(PostModel.fromJson(item));
  //       }
  //     } else {
  //       isLoading.value = false;
  //     }
  //   } catch (e) {
  //     isLoading.value = false;
  //     // var response = await http.get(Uri.parse('${url}feeds'), headers: {
  //     //   'Accept': 'application/json',
  //     //   'Authorization': 'Bearer ${box.read('token')}',
  //     // });
  //     // print("The problem here in getAllPosts: " + e.toString());
  //     // print("The problem here : " + json.decode(response.body));
  //   }
  // }

  // Future<void> placeOrder(PlaceOrderBody placeOrder, Function callback) async {
  //
  //   _isLoading = true;
  //
  //   Response response = await orderRepo.placeOrder(placeOrder);
  //   if(response.statusCode == 200){
  //     _isLoading = false;
  //
  //     String message = response.body['message'];
  //     String orderID = response.body['order_id'].toString();
  //
  //     callback(true, message, orderID);
  //   }else{
  //     print("iam the fucking problem in placeOrder in OrderController");
  //     print("becous of me : " + response.statusCode.toString());
  //     callback(false, response.statusText!, '-1');
  //   }
  // }

  Future<void> placePost(int id, PlacePostBody content) async {

    _isLoadingg = true;

    await postRepo.placePost(id, content);
    // print("The response before if statement in createPost is  :::::::::::::::: " + response.toString());
    // print("The response.statusCode before if statement in createPost is  :::::::::::::::: " + response.statusCode.toString());
    // if(response.statusCode == 200){
    //   _isLoadingg = false;
    //   print("The response.body in createPost :::::::::::::::: " + response.body.toString());
    //   // print(json.decode(response.body));
    //   // print("The response.body 22222 :::::::::::::::: " + response.body.toString());
    //
    // }else{
    //   print("iam the fucking problem in createPost in PostController");
    //   print("because of me : " + response.statusCode.toString());
    // }
  }

  // Future createPost({required String content,}) async {
  //   try {
  //     var data = {'content': content,};
  //
  //     var response = await http.post(Uri.parse('${url}feed/store'),
  //       headers: {
  //         'Accept': 'application/json',
  //         'Authorization': 'Bearer ${box.read('token')}',
  //       },
  //       body: data,
  //     );
  //
  //     if (response.statusCode == 200) {
  //       print(json.decode(response.body));
  //     } else {
  //       Get.snackbar(
  //         'Error in CreatePost',
  //         json.decode(response.body)['message'],
  //         snackPosition: SnackPosition.TOP,
  //         backgroundColor: Colors.red,
  //         colorText: Colors.white,
  //       );
  //     }
  //   } catch (e) {
  //     print("here in post_controller" + e.toString());
  //   }
  // }

  // Future<void> getAllPosts() async {
  //   _isLoadingg = true;
  //   Response response = await postRepo.getPostList();
  //   if(response.statusCode == 200){
  //     _currentPostList = [];
  //     _currentPostList.addAll(Autogenerated.fromJson(response.body).feeds);
  //   } else {    _currentPostList = [];    }
  //   _isLoadingg = false;
  //   update();
  // }

  // Future<void> getReplies() async {
  //   _isLoadingg = true;
  //   Response response = await repliesRepo.getRepliesList();
  //   print("The response before if statement in getReplies is  :::::::::::::::: " + response.toString());
  //   if(response.statusCode == 200){
  //     // _currentRepliesList = [];
  //     // _currentRepliesList.addAll(SingleReply.fromJson(response.body).comments);
  //   } else {
  //     // _currentRepliesList = [];
  //   }
  //   _isLoadingg = false;
  //   update();
  // }

  // Future getComments(id) async {
  //   try {
  //     comments.value.clear();
  //     isLoading.value = true;
  //
  //     var response = await http.get(
  //       Uri.parse('${url}feed/comments/$id'),
  //       headers: {
  //         'Accept': 'application/json',
  //         'Authorization': 'Bearer ${box.read('token')}',
  //       },
  //     );
  //
  //     if (response.statusCode == 200) {
  //       isLoading.value = false;
  //       final content = json.decode(response.body)['comments'];
  //       for (var item in content) {
  //         comments.value.add(CommentModel.fromJson(item));
  //       }
  //     } else {
  //       isLoading.value = false;
  //       print(json.decode(response.body));
  //     }
  //   } catch (e) {
  //     print(e.toString());
  //   }
  // }

  Future createComment(id, body) async {
    try {
      isLoading.value = true;
      var data = {
        'body': body,
      };

      var request = await http.post(
        Uri.parse('${url}feed/comment/$id'),
        headers: {
          'Accept': 'application/json',
          'Authorization': 'Bearer ${box.read('token')}',
        },
        body: data,
      );

      if (request.statusCode == 200) {
        isLoading.value = false;
        print(json.decode(request.body));
      } else {
        isLoading.value = false;
        print(json.decode(request.body));
      }
    } catch (e) {
      print(e.toString());
    }
  }


  Future placeLikeAndDislikeForProducts(index, id) async {
    Response response = await likeRepo.placeProductLike(index, id);
    print("I think the problem from here 2 :::::::::::: /////////////////////////////////// ::: " + response.body.toString());
    if (response.statusCode == 200 || response.body['message'] == 'liked') {
      print("I think the problem from here 3 :::::::::::: /////////////////////////////////// ::: " + response.statusCode.toString());
      _isLoadingg = false;
      print(response.body);

    } else if (response.statusCode == 200 || response.body['message'] == 'Unliked') {

      _isLoadingg = false;
      print(response.body);

    } else {

      _isLoadingg = false;
      print(response.body);

    }
  }
  Future placeLikeAndDislike(index, id) async {

    Response response = await likeRepo.placeLike(index, id);
    print("I think the problem from here 2 :::::::::::: /////////////////////////////////// ::: " + response.body.toString());
      if (response.statusCode == 200 || response.body['message'] == 'liked') {
        print("I think the problem from here 3 :::::::::::: /////////////////////////////////// ::: " + response.statusCode.toString());
        _isLoadingg = false;
        print(response.body);

      } else if (response.statusCode == 200 || response.body['message'] == 'Unliked') {

        _isLoadingg = false;
        print(response.body);

      } else {

        _isLoadingg = false;
        print(response.body);

      }
  }

  // Future likeAndDislike(id) async {
  //
  //   late String token;
  //   token = AppConstants.TOKEN;
  //
  //   try {
  //     _isLoadingg = true;
  //     var request = await http.post(
  //       Uri.parse('http://192.168.1.6:8000/api/v1/post/comment/like/$id'),
  //       headers: {
  //         'Content-type' : 'application/json; charset=UTF-8',
  //         'Authorization' : 'Bearer $token',
  //         // 'Connection' : 'Keep-Alive',
  //         // "HttpHeaders.contentTypeHeader": "application/json",
  //         "Accept": "application/json"
  //       },
  //     );
  //     if (request.statusCode == 200 || json.decode(request.body)['message'] == 'liked') {
  //
  //       _isLoadingg = false;
  //       print(request.body);
  //
  //     } else if (request.statusCode == 200 || json.decode(request.body)['message'] == 'Unliked') {
  //
  //       _isLoadingg = false;
  //       print(request.body);
  //
  //     } else {
  //
  //       _isLoadingg = false;
  //       print(request.body);
  //
  //     }
  //   } catch (e) {
  //     print(e.toString());
  //   }
  // }

  List<PostModel> getPostLength(id){
    return postRepo.getPostLength(id);
  }

  void setFoodNote(String note){
    _foodNote = note;
    // update();
  }
}